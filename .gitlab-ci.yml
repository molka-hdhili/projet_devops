variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - build
  - test
  - deploy

# -----------------------------------
# BUILD BACKEND
# -----------------------------------
build_backend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA" ./backend
    - docker push "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/backend:latest"
    - docker push "$CI_REGISTRY_IMAGE/backend:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

# -----------------------------------
#  BUILD FRONTEND
# -----------------------------------
build_frontend:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA" ./frontend
    - docker push "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA"
    - docker tag "$CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/frontend:latest"
    - docker push "$CI_REGISTRY_IMAGE/frontend:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

# -----------------------------------
#  TEST BACKEND AVEC REDIS & MONGO
# -----------------------------------
test_backend:
  stage: test
  image: node:14
  services:
    - name: redis:alpine
      alias: redis
    - name: mongo:4.4
      alias: mongo
  variables:
    REDIS_HOST: redis
    REDIS_PORT: 6379
    MONGO_URL: "mongodb://mongo:27017/testdb"
  before_script:
    - cd backend
    - npm install
    #  Optionnel : attendre que Mongo soit prêt
    - until nc -z mongo 27017; do echo "Attente de Mongo..."; sleep 2; done
  script:
    - echo "Lancement des tests backend avec Redis et Mongo…"
    - npm test
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

# -----------------------------------
#  DEPLOY KUBERNETES
# -----------------------------------
deploy_kubernetes:
  stage: deploy
  image:
    name: lachlanevenson/k8s-kubectl:latest
    entrypoint: [""]
  script:
    - echo " Déploiement Kubernetes en cours…"
    - kubectl config use-context default
    - kubectl get nodes
    - kubectl apply -f k8s/
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
  tags:
    - local  #  Oui, si runner local; sinon change par le tag de ton runner Kubernetes
